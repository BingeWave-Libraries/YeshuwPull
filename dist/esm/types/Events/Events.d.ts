declare class Events {
    private static routeCreateEvent;
    private static routeListEvents;
    private static routeUpdateEvent;
    private static routeUpdateEventDesign;
    private static routeViewEvent;
    private static routeDeleteEvent;
    private static routeGetMessagesEvent;
    private static routeSendMessageEvent;
    private static routeViewMessagesEvent;
    private static routeUpdateMessagesEvent;
    private static routeDeleteMessagesEvent;
    private static routeStartStream;
    private static routeStopStream;
    private static routeCancelEvent;
    private static routeSetState;
    private static routeGetState;
    private static routeIncrementStateBy;
    private static routeDecrementStateBy;
    private static routeStartBroadcasting;
    private static routeStopBroadcasting;
    private static routeStartRecording;
    private static routeStopRecording;
    private static routeListWidgets;
    private static routeAddWidget;
    private static routeUpdateWidget;
    private static routeRemoveWidget;
    private static routeSetOptionsWidget;
    private static routeGetOptionsWidget;
    static createEvent(data: object, query?: object | null, options?: object | null): Promise<any>;
    static viewEvent(event_id: string, query?: object | null, options?: object | null): Promise<any>;
    static getEvents(query?: object | null, options?: object | null): Promise<any>;
    static updateEvent(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static updateEventDesign(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static deleteEvent(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static getChatMessages(event_id: string, query?: object | null, options?: object | null): Promise<any>;
    static getSingleChatMessage(event_id: string, message_id: string, query?: object | null, options?: object | null): Promise<any>;
    static sendChatMessage(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static updateChatMessage(event_id: string, message_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static deleteChatMessage(event_id: string, message_id: string, data?: object | null, query?: object | null, options?: object | null): Promise<any>;
    static getWidgets(event_id: string, query?: object | null, options?: object | null): Promise<any>;
    static addWidget(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static updateWidget(event_id: string, widget_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static deleteWidget(event_id: string, widget_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static setWidgetPositioningOption(event_id: string, option_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static getWidgetPositioningOption(event_id: string, query?: object | null, options?: object | null): Promise<any>;
    static startBroadcast(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static stopBroadcast(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static startRecording(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static stopRecording(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static startStreaming(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static stopStreaming(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static cancelEvent(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static setState(event_id: string, data: object, query?: object | null, options?: object | null): Promise<any>;
    static getState(event_id: string, key: any, query?: object | null, options?: object | null): Promise<any>;
    static incrementStateBy(event_id: string, key: any, data: object, query?: object | null, options?: object | null): Promise<any>;
    static decrementStateBy(event_id: string, key: any, data: object, query?: object | null, options?: object | null): Promise<any>;
}
export default Events;
